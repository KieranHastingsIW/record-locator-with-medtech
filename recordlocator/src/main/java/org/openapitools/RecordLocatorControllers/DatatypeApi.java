/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.RecordLocatorControllers;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

import org.openapitools.model.DTModel;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;


@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-01-23T13:39:37.615092+13:00[Pacific/Auckland]")
@Validated
@Tag(name = "datatype", description = "the datatype API")
public interface DatatypeApi {
    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /datatype : Retriev all datatypes
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "datatypeGet",
        summary = "Retriev all datatypes",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DTModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/datatype",
        produces = { "application/json" }
    )
    default ResponseEntity<List<DTModel>> datatypeGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"description\" : \"description\", \"rank\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /datatype : Insert datatype
     *
     * @param rlSDataTypePOSTAPISchema  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "datatypePost",
        summary = "Insert datatype",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/datatype",
        consumes = { "application/json" }
    )
    default ResponseEntity<DTModel> datatypePost(
        @Parameter(name = "RLSDataTypePOSTAPISchema", description = "", required = true) @Valid @RequestBody DTModel rlSDataTypePOSTAPISchema
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
